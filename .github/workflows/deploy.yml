name: CI-CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-to-droplet
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # local paths
      BACKEND_DIR: backend
      FRONTEND_DIR: frontend
      # remote paths
      REMOTE_APP_DIR: /var/www/tenantfirstaid
      REMOTE_BACKEND_DIR: /var/www/tenantfirstaid/backend
      REMOTE_FRONTEND_DIR: /var/www/tenantfirstaid/frontend
      SERVICE_NAME: tenantfirstaid-backend

    steps:
      # ───────── 1. Checkout ───────────────────────────────────
      - uses: actions/checkout@v4

      # ───────── 2. Build React SPA ────────────────────────────
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Build UI
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm ci
          npm run build

      # ───────── 3. Copy source + build artefacts ──────────────
      - name: Upload code via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            ${{ env.BACKEND_DIR }}/**
            ${{ env.FRONTEND_DIR }}/dist/**
          target: ${{ env.REMOTE_APP_DIR }}
          rm: false

      # ───────── 4. SSH: venv + uv sync + restart ──────────────
      - name: Bootstrap on droplet
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd $REMOTE_BACKEND_DIR
            
            # 4-A. Create venv once
            if [ ! -d venv ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            
            # 4-B. Install uv (fast installer from Astral) if it isn't there
            if ! command -v uv >/dev/null 2>&1; then
              curl -LsSf https://astral.sh/uv/install.sh | sh
              export PATH="$HOME/.local/bin:$PATH"
            fi
            
            # 4-C. Sync dependencies directly from pyproject.toml  ⚡
            uv sync                       # resolves & installs in one shot
            
            # 4-D. Inject environment secrets
            cat > .env <<EOF
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            EOF
            chmod 600 .env
            
            # 4-E. Ownership, restart, reload
            sudo chown -R $USER:www-data $REMOTE_APP_DIR
            sudo systemctl restart $SERVICE_NAME
            sudo systemctl reload nginx
